/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package schemakeeper.generated.avro;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class Message extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3721196116806660016L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Message\",\"namespace\":\"schemakeeper.generated.avro\",\"fields\":[{\"name\":\"f1\",\"type\":\"long\"},{\"name\":\"f2\",\"type\":\"string\"},{\"name\":\"f3\",\"type\":\"long\"},{\"name\":\"f4\",\"type\":[\"null\",\"string\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Message> ENCODER =
      new BinaryMessageEncoder<Message>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Message> DECODER =
      new BinaryMessageDecoder<Message>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Message> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Message> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Message> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Message>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Message to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Message from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Message instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Message fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long f1;
  @Deprecated public CharSequence f2;
  @Deprecated public long f3;
  @Deprecated public CharSequence f4;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Message() {}

  /**
   * All-args constructor.
   * @param f1 The new value for f1
   * @param f2 The new value for f2
   * @param f3 The new value for f3
   * @param f4 The new value for f4
   */
  public Message(Long f1, CharSequence f2, Long f3, CharSequence f4) {
    this.f1 = f1;
    this.f2 = f2;
    this.f3 = f3;
    this.f4 = f4;
  }

  public SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return f1;
    case 1: return f2;
    case 2: return f3;
    case 3: return f4;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: f1 = (Long)value$; break;
    case 1: f2 = (CharSequence)value$; break;
    case 2: f3 = (Long)value$; break;
    case 3: f4 = (CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'f1' field.
   * @return The value of the 'f1' field.
   */
  public long getF1() {
    return f1;
  }


  /**
   * Sets the value of the 'f1' field.
   * @param value the value to set.
   */
  public void setF1(long value) {
    this.f1 = value;
  }

  /**
   * Gets the value of the 'f2' field.
   * @return The value of the 'f2' field.
   */
  public CharSequence getF2() {
    return f2;
  }


  /**
   * Sets the value of the 'f2' field.
   * @param value the value to set.
   */
  public void setF2(CharSequence value) {
    this.f2 = value;
  }

  /**
   * Gets the value of the 'f3' field.
   * @return The value of the 'f3' field.
   */
  public long getF3() {
    return f3;
  }


  /**
   * Sets the value of the 'f3' field.
   * @param value the value to set.
   */
  public void setF3(long value) {
    this.f3 = value;
  }

  /**
   * Gets the value of the 'f4' field.
   * @return The value of the 'f4' field.
   */
  public CharSequence getF4() {
    return f4;
  }


  /**
   * Sets the value of the 'f4' field.
   * @param value the value to set.
   */
  public void setF4(CharSequence value) {
    this.f4 = value;
  }

  /**
   * Creates a new Message RecordBuilder.
   * @return A new Message RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new Message RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Message RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * Creates a new Message RecordBuilder by copying an existing Message instance.
   * @param other The existing instance to copy.
   * @return A new Message RecordBuilder
   */
  public static Builder newBuilder(Message other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * RecordBuilder for Message instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Message>
    implements org.apache.avro.data.RecordBuilder<Message> {

    private long f1;
    private CharSequence f2;
    private long f3;
    private CharSequence f4;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.f1)) {
        this.f1 = data().deepCopy(fields()[0].schema(), other.f1);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.f2)) {
        this.f2 = data().deepCopy(fields()[1].schema(), other.f2);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.f3)) {
        this.f3 = data().deepCopy(fields()[2].schema(), other.f3);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.f4)) {
        this.f4 = data().deepCopy(fields()[3].schema(), other.f4);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing Message instance
     * @param other The existing instance to copy.
     */
    private Builder(Message other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.f1)) {
        this.f1 = data().deepCopy(fields()[0].schema(), other.f1);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.f2)) {
        this.f2 = data().deepCopy(fields()[1].schema(), other.f2);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.f3)) {
        this.f3 = data().deepCopy(fields()[2].schema(), other.f3);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.f4)) {
        this.f4 = data().deepCopy(fields()[3].schema(), other.f4);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'f1' field.
      * @return The value.
      */
    public long getF1() {
      return f1;
    }


    /**
      * Sets the value of the 'f1' field.
      * @param value The value of 'f1'.
      * @return This builder.
      */
    public Builder setF1(long value) {
      validate(fields()[0], value);
      this.f1 = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'f1' field has been set.
      * @return True if the 'f1' field has been set, false otherwise.
      */
    public boolean hasF1() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'f1' field.
      * @return This builder.
      */
    public Builder clearF1() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'f2' field.
      * @return The value.
      */
    public CharSequence getF2() {
      return f2;
    }


    /**
      * Sets the value of the 'f2' field.
      * @param value The value of 'f2'.
      * @return This builder.
      */
    public Builder setF2(CharSequence value) {
      validate(fields()[1], value);
      this.f2 = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'f2' field has been set.
      * @return True if the 'f2' field has been set, false otherwise.
      */
    public boolean hasF2() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'f2' field.
      * @return This builder.
      */
    public Builder clearF2() {
      f2 = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'f3' field.
      * @return The value.
      */
    public long getF3() {
      return f3;
    }


    /**
      * Sets the value of the 'f3' field.
      * @param value The value of 'f3'.
      * @return This builder.
      */
    public Builder setF3(long value) {
      validate(fields()[2], value);
      this.f3 = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'f3' field has been set.
      * @return True if the 'f3' field has been set, false otherwise.
      */
    public boolean hasF3() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'f3' field.
      * @return This builder.
      */
    public Builder clearF3() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'f4' field.
      * @return The value.
      */
    public CharSequence getF4() {
      return f4;
    }


    /**
      * Sets the value of the 'f4' field.
      * @param value The value of 'f4'.
      * @return This builder.
      */
    public Builder setF4(CharSequence value) {
      validate(fields()[3], value);
      this.f4 = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'f4' field has been set.
      * @return True if the 'f4' field has been set, false otherwise.
      */
    public boolean hasF4() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'f4' field.
      * @return This builder.
      */
    public Builder clearF4() {
      f4 = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Message build() {
      try {
        Message record = new Message();
        record.f1 = fieldSetFlags()[0] ? this.f1 : (Long) defaultValue(fields()[0]);
        record.f2 = fieldSetFlags()[1] ? this.f2 : (CharSequence) defaultValue(fields()[1]);
        record.f3 = fieldSetFlags()[2] ? this.f3 : (Long) defaultValue(fields()[2]);
        record.f4 = fieldSetFlags()[3] ? this.f4 : (CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Message>
    WRITER$ = (org.apache.avro.io.DatumWriter<Message>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Message>
    READER$ = (org.apache.avro.io.DatumReader<Message>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.f1);

    out.writeString(this.f2);

    out.writeLong(this.f3);

    if (this.f4 == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.f4);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.f1 = in.readLong();

      this.f2 = in.readString(this.f2 instanceof Utf8 ? (Utf8)this.f2 : null);

      this.f3 = in.readLong();

      if (in.readIndex() != 1) {
        in.readNull();
        this.f4 = null;
      } else {
        this.f4 = in.readString(this.f4 instanceof Utf8 ? (Utf8)this.f4 : null);
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.f1 = in.readLong();
          break;

        case 1:
          this.f2 = in.readString(this.f2 instanceof Utf8 ? (Utf8)this.f2 : null);
          break;

        case 2:
          this.f3 = in.readLong();
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.f4 = null;
          } else {
            this.f4 = in.readString(this.f4 instanceof Utf8 ? (Utf8)this.f4 : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










