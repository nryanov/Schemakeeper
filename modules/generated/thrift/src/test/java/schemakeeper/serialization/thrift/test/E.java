/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package schemakeeper.serialization.thrift.test;


import java.util.Map;
import java.util.HashMap;
import java.util.Collections;
import java.util.EnumMap;
import org.apache.thrift.TEnum;

public enum E implements TEnum {
  X(1),
  Y(2),
  Z(3);

  private final int value;

  private E(int value) {
    this.value = value;
  }

  /**
   * Get the integer value of this enum value, as defined in the Thrift IDL.
   */
  public int getValue() {
    return value;
  }


  /**
   * Find a the enum type by its integer value, as defined in the Thrift IDL.
   * @return null if the value is not found.
   */
  public static E findByValue(int value) {
    switch (value) {
      case 1:
        return X;
      case 2:
        return Y;
      case 3:
        return Z;
      default:
        return null;
    }
  }

  /**
   * Returns a map of the annotations and their values for this struct declaration.
   * See fieldAnnotations or valueAnnotations for the annotations attached to struct fields
   * or enum values.
   */
  public static final Map<String, String> structAnnotations;
  static {
    structAnnotations = Collections.emptyMap();
  }

  /**
   * Returns a map of the annotations for each of this enum's values, keyed by the enum
   * value. See structAnnotations for the annotations attached to this enum's declaration.
   */
  public static final Map<E, Map<String, String>> valueAnnotations;
  static {
    valueAnnotations = Collections.emptyMap();
  }

}
