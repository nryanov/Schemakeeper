/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package schemakeeper.serialization.thrift.test;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

import com.twitter.scrooge.ThriftStructIface;
import com.twitter.scrooge.internal.TProtocols;

// No additional import required for struct/union.

public class FooOrBar extends TUnion<FooOrBar, FooOrBar._Fields> {
  private static final TStruct STRUCT_DESC = new TStruct("FooOrBar");

  private static final TField FOO_FIELD_DESC = new TField("foo", TType.STRING, (short)1);
  private static final TField BAR_FIELD_DESC = new TField("bar", TType.STRING, (short)2);

  /** The set of fields this object contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    FOO((short)1, "foo"),
    BAR((short)2, "bar");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FOO
          return FOO;
        case 2: // BAR
          return BAR;
        default:
          return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  
  /**
   * FieldValueMetaData.type returns TType.STRING for both string and binary field values.
   * This set can be used to determine if a FieldValueMetaData with type TType.STRING is actually
   * declared as binary in the idl file.
   */
  public static final Set<FieldValueMetaData> binaryFieldValueMetaDatas;
  
  private static FieldValueMetaData registerBinaryFieldValueMetaData(FieldValueMetaData f, Set<FieldValueMetaData> binaryFieldValues) {
    binaryFieldValues.add(f);
    return f;
  }
  
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    Set<FieldValueMetaData> tmpSet = new HashSet<FieldValueMetaData>();
    tmpMap.put(_Fields.FOO, new FieldMetaData("foo", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.BAR, new FieldMetaData("bar", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    binaryFieldValueMetaDatas = Collections.unmodifiableSet(tmpSet);
    FieldMetaData.addStructMetaDataMap(FooOrBar.class, metaDataMap);
  }

  /**
   * Returns a map of the annotations and their values for this struct declaration.
   * See fieldAnnotations or valueAnnotations for the annotations attached to struct fields
   * or enum values.
   */
  public static final Map<String, String> structAnnotations;
  static {
    structAnnotations = Collections.emptyMap();
  }

  /**
   * Returns a map of the annotations for each of this struct's fields, keyed by the field.
   * See structAnnotations for the annotations attached to this struct's declaration.
   */
  public static final Map<_Fields, Map<String, String>> fieldAnnotations;
  static {
    fieldAnnotations = Collections.emptyMap();
  }


  public FooOrBar() {
    super();
  }

  public FooOrBar(_Fields setField, Object value) {
    super(setField, value);
  }

  public FooOrBar(FooOrBar other) {
    super(other);
  }

  public static List<String> validateNewInstance(FooOrBar item) {
    final List<String> buf = new ArrayList<String>();
    final TFieldIdEnum setField = item.getSetField();

    if (setField != null) {
      final short thriftFieldId = setField.getThriftFieldId();
    } else {
      buf.add("No fields set for union type 'FooOrBar'.");
    }
    return buf;
  }

  public FooOrBar deepCopy() {
    return new FooOrBar(this);
  }

  public static FooOrBar foo(String value) {
    FooOrBar x = new FooOrBar();
    x.setFoo(value);
    return x;
  }
  public static FooOrBar bar(String value) {
    FooOrBar x = new FooOrBar();
    x.setBar(value);
    return x;
  }

  @java.lang.Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case FOO:
        if (value instanceof String) {
          break;
        }
        throw new ClassCastException("Was expecting value of type String for field 'foo', but got " + value.getClass().getSimpleName());
      case BAR:
        if (value instanceof String) {
          break;
        }
        throw new ClassCastException("Was expecting value of type String for field 'bar', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @java.lang.Override
  protected Object standardSchemeReadValue(TProtocol iprot, TField field) throws TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case FOO:
          if (field.type == FOO_FIELD_DESC.type) {
            String foo;
            foo = iprot.readString();

            return foo;
          } else {
            TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case BAR:
          if (field.type == BAR_FIELD_DESC.type) {
            String bar;
            bar = iprot.readString();

            return bar;
          } else {
            TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @java.lang.Override
  protected void standardSchemeWriteValue(TProtocol oprot) throws TException {
    switch (setField_) {
      case FOO:
        String foo = (String)value_;
        oprot.writeString(foo);

        return;
      case BAR:
        String bar = (String)value_;
        oprot.writeString(bar);

        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @java.lang.Override
  protected Object tupleSchemeReadValue(TProtocol iprot, short fieldID) throws TException {
    throw new UnsupportedOperationException("tuple scheme not implemented");
  }

  @java.lang.Override
  protected void tupleSchemeWriteValue(TProtocol oprot) throws TException {
    throw new UnsupportedOperationException("tuple scheme not implemented");
  }

  @java.lang.Override
  protected TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case FOO:
        return FOO_FIELD_DESC;
      case BAR:
        return BAR_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @java.lang.Override
  protected TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @java.lang.Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public String getFoo() {
    if (getSetField() == _Fields.FOO) {
      return (String)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'foo' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setFoo(String value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.FOO;
    value_ = value;
  }
  public String getBar() {
    if (getSetField() == _Fields.BAR) {
      return (String)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'bar' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setBar(String value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.BAR;
    value_ = value;
  }

  public boolean equals(Object other) {
    if (other instanceof FooOrBar) {
      return equals((FooOrBar)other);
    } else {
      return false;
    }
  }

  public boolean equals(FooOrBar other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @java.lang.Override
  public int compareTo(FooOrBar other) {
    int lastComparison = TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }

  @java.lang.Override
  public int hashCode() {
    int hashCode = this.getClass().getName().hashCode();
    TFieldIdEnum setField = getSetField();

    if (setField != null) {
      final short thriftFieldId = setField.getThriftFieldId();
      hashCode = hashCode * 31 + thriftFieldId;
      Object value = getFieldValue();

      if (1 == thriftFieldId && (isSet(_Fields.FOO))) {
        hashCode = 31 * hashCode + ((String)value).hashCode();
      }
      if (2 == thriftFieldId && (isSet(_Fields.BAR))) {
        hashCode = 31 * hashCode + ((String)value).hashCode();
      }
    }
    return hashCode;
  }
}

